class Node:
    def __init__(self,value):
        self.value = value
        self.left = None
        self.right = None

def insert(root,node):
    if not isinstance(root, Node) or not isinstance(node, Node):
        raise TypeError("Los argumentos deben ser instancias de la clase Node")
    
    if root is None:
        root = node
    else:
        if root.value < node.value:
            if root.right is None:
                root.right = node
            else:
                insert(root.right, node)
        else:
            if root.left is None:
                root.left = node
            else:
                insert(root.left, node)

def inOrden(root, values):
    if not isinstance(root, Node):
        raise TypeError("El argumento root debe ser una instancia de la clase Node")
    
    if root is not None:
        inOrden(root.left, values)
        values.append(root.value)
        inOrden(root.right, values)

def min_sum_of_absolute_differences(root_A,root_B):
    if not isinstance(root_A, Node) or not isinstance(root_B, Node):
        raise TypeError("Los argumentos deben ser instancias de la clase Node")
    
    values_A = []
    values_B = []

    inOrden(root_A, values_A)
    inOrden(root_B, values_B)

    values_A.sort()
    values_B.sort()

    result = sum(abs(a-b) for a,b in zip(values_A,values_B))
    return result

# Ejemplo de uso
root_A = Node(4)
insert(root_A, Node(1))
insert(root_A, Node(8))
insert(root_A, Node(7))


root_B = Node(2)
insert(root_B, Node(3))
insert(root_B, Node(6))
insert(root_B, Node(5))

try:
    result = min_sum_of_absolute_differences(root_A, root_B)
    print("El resultado de la suma de absolutos tikitiki:", result)
except TypeError as e:
    print("Error:", e)
